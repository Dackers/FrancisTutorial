<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Mode = "Titles"
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if keyboard_check_pressed(vk_escape)
{
    //This allows us to hit escape and bring up menu, then hit escape to close menu
    if Mode = "Game" { Mode = "Titles" } else { Mode = "Game" }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Draw GUI's frame of references is the "view" rather than the room. So x = 100 for example
//would be 100 pixesl from the view so that it's always visible

//Game is started in titles mode, so menu comes up. In step event we can switch back
//and forth between "Titles" and "Game" mode which allows us to open and close menu
//using Esc key wiuhin game. obj_Menu is a persistent object for that reason
if Mode = "Titles"
{
     //Sets x coord to one-half the width of the port but the y value to 0
    x = view_wport[0] / 2
    y = 0
    
    CurrentY = y
    Margin = 10
    
    //Sets the text of "draw_text" to center of draw_text's x coord
    draw_set_halign(fa_center)
    //Set font
    draw_set_font(fnt_Title)
    //Draws the text
    DrawTextAndUpdateCurrentY("NOXP")
    
    draw_set_font(fnt_Menu)
    DrawTextAndUpdateCurrentY("A game by Dacker")
    
    //Insert a 50 pixel space between the above strings and the below
    CurrentY = CurrentY + 50
    
    if ButtonPressed("New Game")
    {
        DeleteInventory() //Delete save file to start a new game
        Mode = "Game"
        room_goto(rm_Level01)
    }
    
    if ButtonPressed("Quit")
    {
        game_end()
    }
} else if Mode = "Game"
{
    //Check that player exists
    if instance_exists(obj_Player)
    {
        /* Power Bar */
        BarIndent = 50
        BarWidth = view_wport - (BarIndent * 2) //Makes the length of the bar span the width of the room, minus BarIndent on both sides
        BarHeight = 20 //Sets height of bar at 20 pixels
        BarTop = (view_hport - BarIndent) - BarHeight //Sets bottom of bar to begin 50 pixels above the bottom of screen
        
        PowerFraction = obj_Player.Power / obj_Player.PowerMax //Sets percentage of bar to fill based on Player power
       
        draw_set_color(c_green)
        draw_set_alpha(0.7) 
        //Draws outline of power bar
        draw_rectangle(BarIndent, BarTop, BarIndent + BarWidth, BarTop + BarHeight, true)
        //Draws color of power bar, filling in from left to right as player power increases
        draw_rectangle(BarIndent, BarTop, BarIndent + (BarWidth * PowerFraction), BarTop + BarHeight, false)
        draw_set_alpha(1)
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
