<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_Swarmer</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>obj_Enemy</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>depth = 10
State = "Idle"
InitializeEnemyCollision(25,random(360))

image_xscale = 0.6
image_yscale = image_xscale

Eater = noone
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/* AI */
if State = "Idle"
{
    sprite_index = spr_Swarmer
    //Were we eaten by a Boomer?
    if instance_exists(Eater)
    {
        State = "Eaten" //If this is true, the code in the boomer sets the "Eater" variable to the ID of the Boomer instance that at this Swarmer
    //If not, wander around checking for line of sight to player
    //Draw line from Exploding Enemy to Player and see if Solid object is in way
    } else if IHaveLineOfSightTo(obj_Player)
    {
        //Check if looking in player's direction, with 90 degree FOV
        DirectionToPlayer = point_direction(x,y,obj_Player.x,obj_Player.y) //Angle to player
        RelativeDirectionToPlayer = abs(image_angle - DirectionToPlayer) // Angle from direction facing to player
        HalfFieldOfView = 45
        if RelativeDirectionToPlayer &lt; HalfFieldOfView
        or RelativeDirectionToPlayer &gt; 360 - HalfFieldOfView
        {
            //if no solid object is in way...
            State = "Alert"
        }
    }
} else if State = "Alert"
{
    sprite_index = spr_SwarmerAlert
    
    //If we are eaten by a Boomer because he ate a Glob stuck to us
    if instance_exists(Eater)
    {
        State = "Eaten"
    //if not...
    } else if IHaveLineOfSightTo(obj_Player) //Even when alert, if player ducks behind solid object or dies, Enemy loses line of sight
    {
        //Seek the player
        direction = point_direction(x,y,obj_Player.x,obj_Player.y)
    } else
    {
        //If Enemy loses line of sight, return to Idle state
        State = "Idle"
    }
} else if State = "Eaten"
{
    if instance_exists(Eater)
    {
        //move with the Boomer that ate us
        x = Eater.x
        y = Eater.y
    } else
    {
        //Our eater has been destroyed!!
        ExplodeIntoANumberOfChunks(25,obj_ExplodingEnemyChunk)
    }
}

/* Facing */
image_angle = direction

/* Collision */
StayInsideRoom()
EnemyCollisionWithSolids()

/* Damage */
if HitByProjectile()
{
    ScreenShake(25)
    //ExplodeIntoANumberOfChunks(25,obj_ExplodingEnemyChunk)
    ExplodeIntoANumberOfChunks(15,obj_SwarmerChunk)
    //Enemy death sound
    audio_play_sound(snd_EnemyExplode,1,false)
    //Destroy enemy
    instance_destroy()
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
