<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_Boomer</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>obj_Enemy</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>depth = 0
image_speed = 5 / room_speed //Set frame speed of the ShrinkingEnemy sprite
InitializeEnemyCollision(100,random(360))
image_xscale = 0.5
image_yscale = image_xscale
image_alpha = 0.5
ThingsEaten = 0
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/* Eat Globs */
DetectionRange = 400
EatRange = 10
NearestGlob = instance_nearest(x,y,obj_Glob)

//Is there a glob?
if instance_exists(NearestGlob)
{
    //...if so, is it near enough that I can detect it?
    DistanceToGlob = point_distance(x,y,NearestGlob.x,NearestGlob.y)
    if DistanceToGlob &lt; DetectionRange
    {
        //...if so, can I get to it?
        if IHaveLineOfSightTo(NearestGlob)
        {
            //...if so, head towards it...
            direction = point_direction(x,y,NearestGlob.x,NearestGlob.y)
            //...when we are close enough to eat it...
            if DistanceToGlob &lt; EatRange
            {
                //...is it attached to a awarmer?
                if instance_exists(NearestGlob.Host) //"NearestGlob" is the instance of obj_Glob closest to us. "Host" is the obj_Swarmer the Glob is sticking to. So this IDs whether the Glob we are about to eat also has a Swarmer stuck to it
                {
                    //...if so, tell it we're the one who ate it
                    NearestGlob.Host.Eater = id
                    ThingsEaten = ThingsEaten + 1
                    //Grow larger
                    GrowthRate = 0.25
                    MaximumSize = 2
                    if image_xscale &lt; MaximumSize
                    {
                        image_xscale = image_xscale + GrowthRate
                        image_yscale = image_yscale + GrowthRate
                        //Reduce size if near solid so he doesn't get stuck
                        if place_meeting(x,y,obj_Solid)
                        {
                            image_xscale = image_xscale - GrowthRate
                            image_yscale = image_yscale - GrowthRate
                        }
                    }
                }
                //...go ahead and eat it
                with NearestGlob { instance_destroy() }
            }
        }
    }
}


/* Facing */
image_angle = direction

/* Collision */
StayInsideRoom()
EnemyCollisionWithSolids()

/* Damage */
if HitByProjectile()
{
    //If we have a awarmer inside us, explode
    if ThingsEaten &gt; 0
    {
        instance_destroy()
    }

    /*
    //Shrink enemy
    image_xscale = image_xscale - 0.2
    image_yscale = image_xscale
    
    //Create power up
    instance_create(x,y,obj_PowerUp)
    
    //Destroy enemy once shrunk
    if image_xscale &lt;= 0
    {
        instance_destroy()
        audio_play_sound(snd_EnemyExplode,1,false)
    }
    */
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
