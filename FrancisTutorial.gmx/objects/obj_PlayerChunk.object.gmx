<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_PlayerChunk</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>obj_Projectile</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Reassembling = false
BitInPosition = false

//Location of player's death
OriginalX = x
OriginalY = y

/* Setup to send bits flying out at random speed and direction */
speed = random_range(750,1500) / room_speed
direction = random(360)
image_angle = random(360)

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// We measure acceleration in speed lost per second, so room_speed factors in to it twice
Deceleration = 1500 / (room_speed * room_speed) // At 30fps this  would be a change of 50pps squared
Acceleration = 300 / (room_speed * room_speed) // At 30fps this would be a change of 10pps squared

if Reassembling = false
{   
    /* We are still fyling out from the initial explosion */
        
    if speed &gt; Deceleration
    {
        /* So long as we have some speed to lose */
        //Reduce speed by deceleration
        speed = speed - Deceleration
    } else
    {
        /* Our speed is so low that subtracting deceleration would make it zero or negative */
        //Stop completely
        speed = 0
        //Get ready to head in the opposite direction
        direction = direction + 180
        image_angle = direction + 180
        //Exit loop and enter reassembling phase
        Reassembling = true
    }
} else
{
    /* We've stopped flying out and now want to be sucked back in */
    //Increase our speed backwards
    speed = speed + Acceleration
    
    //If distance to death place is so small that we're about to reach or go past it
    if point_distance(x,y,OriginalX,OriginalY) &lt; speed
    {
        //Stop
        speed = 0
        
        //Did we only just arrive?
        if BitInPosition = false
        {
            //Yes, this instance was not in position before so count us as having arrived
            obj_Game.BitsReassembled = obj_Game.BitsReassembled + 1
            //Remember that this instance is here and has already been counted
            BitInPosition = true
            //Play beep sound indicating a chunk has arrived
            audio_play_sound(snd_ChunkArrive,1,false)
        }
        
        //Have all of the bits returned yet?
        if obj_Game.BitsReassembled &gt;= obj_Game.NumberOfBitsPlayerIsMadeOf
        {
            //Yes! All bits have returned
            
            //Recreate the player
            instance_create(x,y,obj_Player)
            //Play reassembled sound
            audio_play_sound(snd_Reassembled,1,false)
            //Destroy all the chunks (note use of object rather than instance, which destroys all instances of that object
            with obj_PlayerChunk {instance_destroy()}
            //Reset the bits reassembled count for the next player death
            obj_Game.BitsReassembled = 0
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
