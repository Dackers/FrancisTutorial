<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>ScreenShakeAmount = 0

/* Enemy Spawning */
SecondsBetweenEnemySpawns = 1
SecondsSinceLastEnemySpawn = 0

/* Global constants */
NumberOfBitsPlayerIsMadeOf = 9
BitsReassembled = 0
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/* Enemy Spawning */
// Spawn is 1 per second (1 divided by room speed = 1 per second)
SecondsSinceLastEnemySpawn = SecondsSinceLastEnemySpawn + 1 / room_speed
if SecondsSinceLastEnemySpawn &gt;= SecondsBetweenEnemySpawns
{
    //Spawn Enemy
    //Code to ensure enemies spawn outside the room border (makes sure they don't spawn just in corners)
    if choose(true,false)
    {
        SpawnX = random(room_width)
        SpawnY = choose(0, room_height)

    } else
    {
        SpawnX = choose(0, room_width)
        SpawnY = random(room_height)
    }
    //Respawns enemies in random locations, with Exploding Enemies having more of a chance of spawning than Shrinking Enemies    
    instance_create(SpawnX, SpawnY, choose(obj_Boomer,obj_Swarmer,obj_Swarmer,obj_Swarmer,obj_Swarmer,obj_Swarmer,obj_Swarmer,obj_Swarmer,obj_Swarmer))
    SecondsSinceLastEnemySpawn = 0
}

/* Screen Shake */
if ScreenShakeAmount &gt; 0
{
    //Reduce screen shake by 3 each frame until we stabilize
    ScreenShakeAmount = ScreenShakeAmount - 3
} else
{
    //Once stabilized (or if no call for screenshake)) keep track of the view coord
    ScreenShakeAmount = 0
    x = view_xview
    y = view_yview
}
//View position should wobble away from normal posaition by "ScreenShakeAmount"
//If screen shake is 0 this will not change view
ShakeX = random_range(-ScreenShakeAmount,ScreenShakeAmount)
ShakeY = random_range(-ScreenShakeAmount,ScreenShakeAmount)
view_wview = global.ScreenWidth - abs(ShakeX)
view_hview = global.ScreenHeight - abs(ShakeY)
view_angle = 0 + (ShakeX/10) //Rotates screen while shaking
view_xview = x + ShakeX
view_yview = y + ShakeY


/* No longer required due to obj_Menu events
//Quit Key
if keyboard_check_pressed(vk_escape)
{
    room_goto(rm_Start)
    //game_end()
}

//Restart key
if keyboard_check_pressed(ord('R'))
{
    game_restart()
}
*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
