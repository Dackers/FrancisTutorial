<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_Glob</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>self</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>depth = 20

SecondsUntilWeExplode = random_range(0.1,0.2)
Exploding = false
PuddleLifeTime = 2
SecondsUntilFadeOut = PuddleLifeTime

Host = noone
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/* Destroy bullets that leave the room */
if x &lt; 0 or y &lt; 0 or x &gt; room_width or y &gt; room_height
{
    instance_destroy()
}

//Stop when we're about to hit a solid object
if place_meeting(x + hspeed, y + vspeed, obj_Solid)
{
    speed = 0
}

//Make liquid shots slow down as they spray out
Deceleration = 400 / (room_speed * room_speed)
if speed &gt; Deceleration
{
    speed = speed - Deceleration
} else
{
    speed = 0
}

//obj_Glob is not a child of obj_Projectile. So, it doesn't run the code from
//the HitByProjectile() script. Instead, it runs the below code which pushes the enemy back
//Note that we are using each enemy's shunt variables instead of calling their x/y coord directly

//If we're stuck to someone
if instance_exists(Host)
{
    //Follow the guy we stuck to
    x = Host.x
    y = Host.y
//If we haven't stuck to anyone yet
} else
{
    //Did we hit anyone at all?
    EnemyHit = instance_place(x,y,obj_Enemy)
    if instance_exists(EnemyHit)
    {   
        //If so, is it the type we can stick to (i.e., an obj_Swarmer)? (note use of "object_index")
        if EnemyHit.object_index = obj_Swarmer
        {
            //If so, make that enemy our new host and shunt it (only shunt obj_Swarmer)
            Host = EnemyHit
            EnemyHit.xShunt = lengthdir_x(speed,direction)
            EnemyHit.yShunt = lengthdir_y(speed,direction)
        }
    }
}

//Explode when hit
if Exploding = true
{
    //Creates slight delay between explosions so that not all of them explode at same time
    SecondsUntilWeExplode = SecondsUntilWeExplode - 1/room_speed
    if SecondsUntilWeExplode &lt; 0
    {
        //Create Explosion
        instance_create(x,y,obj_GlobExplosion)
        instance_destroy()
    }
} else
{
    ProjectileHit = instance_place(x,y,obj_Projectile)
    if instance_exists(ProjectileHit)
    {
        Exploding = true
    }
}

//Fade out over time
if instance_exists(self.id)
{
    if speed = 0
    {
        SecondsUntilFadeOut = SecondsUntilFadeOut - 1/room_speed
        //Shifts alpha from value of 1 to 0 over time
        image_alpha = SecondsUntilFadeOut / PuddleLifeTime
        //(1 - image_alpha) Gives us a value reverse of the above and this line makes it grow as it becomes more transparent
        image_xscale = 1 + (1 - image_alpha)
        image_yscale = image_xscale
        if image_alpha &lt;= 0 {instance_destroy()}
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
